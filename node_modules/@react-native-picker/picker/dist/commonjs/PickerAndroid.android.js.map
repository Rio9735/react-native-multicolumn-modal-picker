{"version":3,"sources":["PickerAndroid.android.js"],"names":["MODE_DROPDOWN","PickerAndroid","props","ref","pickerRef","React","useRef","useImperativeHandle","viewManagerConfig","UIManager","getViewManagerConfig","mode","blur","Commands","dispatchViewManagerCommand","current","focus","items","selected","useMemo","Children","toArray","children","map","child","index","value","selectedValue","enabled","color","contentDescription","label","style","processedColor","backgroundColor","onSelect","useCallback","nativeEvent","position","onValueChange","filter","item","setNativeProps","Picker","AndroidDropdownPickerNativeComponent","AndroidDialogPickerNativeComponent","rootProps","accessibilityLabel","onBlur","onFocus","prompt","dropdownIconColor","dropdownIconRippleColor","testID","numberOfLines","forwardRef"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAEA;;AACA;;AAMA;;AACA;;;;;;;;;;AAEA,MAAMA,aAAa,GAAG,UAAtB;;AAwBA;AACA;AACA;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAAkDC,GAAlD,EAA8E;AAC5E,QAAMC,SAAS,GAAGC,KAAK,CAACC,MAAN,CAAa,IAAb,CAAlB;AAEAD,EAAAA,KAAK,CAACE,mBAAN,CAA0BJ,GAA1B,EAA+B,MAAM;AACnC,UAAMK,iBAAiB,GAAGC,uBAAUC,oBAAV,CACxBR,KAAK,CAACS,IAAN,KAAeX,aAAf,GACI,wBADJ,GAEI,0BAHoB,CAA1B;;AAKA,WAAO;AACLY,MAAAA,IAAI,EAAE,MAAM;AACV,YAAI,CAACJ,iBAAiB,CAACK,QAAvB,EAAiC;AAC/B;AACD;;AACDJ,+BAAUK,0BAAV,CACE,iCAAeV,SAAS,CAACW,OAAzB,CADF,EAEEP,iBAAiB,CAACK,QAAlB,CAA2BD,IAF7B,EAGE,EAHF;AAKD,OAVI;AAWLI,MAAAA,KAAK,EAAE,MAAM;AACX,YAAI,CAACR,iBAAiB,CAACK,QAAvB,EAAiC;AAC/B;AACD;;AACDJ,+BAAUK,0BAAV,CACE,iCAAeV,SAAS,CAACW,OAAzB,CADF,EAEEP,iBAAiB,CAACK,QAAlB,CAA2BG,KAF7B,EAGE,EAHF;AAKD;AApBI,KAAP;AAsBD,GA5BD;AA8BA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,KAAK,CAACc,OAAN,CAAc,MAAM;AAC5C;AACA,QAAID,QAAQ,GAAG,CAAf,CAF4C,CAG5C;;AACA,UAAMD,KAAK,GAAGZ,KAAK,CAACe,QAAN,CAAeC,OAAf,CAAuBnB,KAAK,CAACoB,QAA7B,EAAuCC,GAAvC,CAA2C,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzE,UAAID,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAO,IAAP;AACD;;AACD,UAAIA,KAAK,CAACtB,KAAN,CAAYwB,KAAZ,KAAsBxB,KAAK,CAACyB,aAAhC,EAA+C;AAC7CT,QAAAA,QAAQ,GAAGO,KAAX;AACD;;AAED,YAAM;AAACG,QAAAA,OAAO,GAAG;AAAX,UAAmBJ,KAAK,CAACtB,KAA/B;AAEA,YAAM;AAAC2B,QAAAA,KAAD;AAAQC,QAAAA,kBAAR;AAA4BC,QAAAA,KAA5B;AAAmCC,QAAAA,KAAK,GAAG;AAA3C,UAAiDR,KAAK,CAACtB,KAA7D;AAEA,YAAM+B,cAAc,GAAG,+BAAaJ,KAAb,CAAvB;AAEA,aAAO;AACLA,QAAAA,KAAK,EAAEA,KAAK,IAAI,IAAT,GAAgB,IAAhB,GAAuBI,cADzB;AAELH,QAAAA,kBAFK;AAGLC,QAAAA,KAHK;AAILH,QAAAA,OAJK;AAKLI,QAAAA,KAAK,EAAE,EACL,GAAGA,KADE;AAELH,UAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAc,+BAAaG,KAAK,CAACH,KAAnB,CAAd,GAA0C,IAF5C;AAGLK,UAAAA,eAAe,EAAEF,KAAK,CAACE,eAAN,GACb,+BAAaF,KAAK,CAACE,eAAnB,CADa,GAEb;AALC;AALF,OAAP;AAaD,KA3Ba,CAAd;AA4BA,WAAO,CAACjB,KAAD,EAAQC,QAAR,CAAP;AACD,GAjCyB,EAiCvB,CAAChB,KAAK,CAACoB,QAAP,EAAiBpB,KAAK,CAACyB,aAAvB,CAjCuB,CAA1B;AAmCA,QAAMQ,QAAQ,GAAG9B,KAAK,CAAC+B,WAAN,CACf,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAmD;AACjD,UAAM;AAACC,MAAAA;AAAD,QAAaD,WAAnB;AACA,UAAME,aAAa,GAAGrC,KAAK,CAACqC,aAA5B;;AAEA,QAAIA,aAAa,IAAI,IAArB,EAA2B;AACzB,UAAID,QAAQ,IAAI,CAAhB,EAAmB;AACjB,cAAMhB,QAAQ,GAAGjB,KAAK,CAACe,QAAN,CAAeC,OAAf,CAAuBnB,KAAK,CAACoB,QAA7B,EAAuCkB,MAAvC,CACdC,IAAD,IAAUA,IAAI,IAAI,IADH,CAAjB;AAGA,cAAMf,KAAK,GAAGJ,QAAQ,CAACgB,QAAD,CAAR,CAAmBpC,KAAnB,CAAyBwB,KAAvC;;AACA,YAAIxB,KAAK,CAACyB,aAAN,KAAwBD,KAA5B,EAAmC;AACjCa,UAAAA,aAAa,CAACb,KAAD,EAAQY,QAAR,CAAb;AACD;AACF,OARD,MAQO;AACLC,QAAAA,aAAa,CAAC,IAAD,EAAOD,QAAP,CAAb;AACD;AACF,KAhBgD,CAkBjD;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAIlC,SAAS,CAACW,OAAV,IAAqBG,QAAQ,KAAKoB,QAAtC,EAAgD;AAC9C;AACAlC,MAAAA,SAAS,CAACW,OAAV,CAAkB2B,cAAlB,CAAiC;AAC/BxB,QAAAA;AAD+B,OAAjC;AAGD;AACF,GA/Bc,EAgCf,CAAChB,KAAK,CAACoB,QAAP,EAAiBpB,KAAK,CAACqC,aAAvB,EAAsCrC,KAAK,CAACyB,aAA5C,EAA2DT,QAA3D,CAhCe,CAAjB;AAmCA,QAAMyB,MAAM,GACVzC,KAAK,CAACS,IAAN,KAAeX,aAAf,GACI4C,6CADJ,GAEIC,2CAHN;AAKA,QAAMC,SAAS,GAAG;AAChBC,IAAAA,kBAAkB,EAAE7C,KAAK,CAAC6C,kBADV;AAEhBnB,IAAAA,OAAO,EAAE1B,KAAK,CAAC0B,OAFC;AAGhBX,IAAAA,KAHgB;AAIhB+B,IAAAA,MAAM,EAAE9C,KAAK,CAAC8C,MAJE;AAKhBC,IAAAA,OAAO,EAAE/C,KAAK,CAAC+C,OALC;AAMhBd,IAAAA,QANgB;AAOhBe,IAAAA,MAAM,EAAEhD,KAAK,CAACgD,MAPE;AAQhBhC,IAAAA,QARgB;AAShBc,IAAAA,KAAK,EAAE9B,KAAK,CAAC8B,KATG;AAUhBmB,IAAAA,iBAAiB,EAAE,+BAAajD,KAAK,CAACiD,iBAAnB,CAVH;AAWhBC,IAAAA,uBAAuB,EAAE,+BAAalD,KAAK,CAACkD,uBAAnB,CAXT;AAYhBC,IAAAA,MAAM,EAAEnD,KAAK,CAACmD,MAZE;AAahBC,IAAAA,aAAa,EAAEpD,KAAK,CAACoD;AAbL,GAAlB;AAgBA,sBAAO,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAElD;AAAb,KAA4B0C,SAA5B,EAAP;AACD;;4BAEczC,KAAK,CAACkD,UAAN,CAAqCtD,aAArC,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport {\n  findNodeHandle,\n  NativeSyntheticEvent,\n  processColor,\n  UIManager,\n} from 'react-native';\nimport AndroidDialogPickerNativeComponent from './AndroidDialogPickerNativeComponent';\nimport AndroidDropdownPickerNativeComponent from './AndroidDropdownPickerNativeComponent';\n\nconst MODE_DROPDOWN = 'dropdown';\n\nimport type {TextStyleProp} from 'StyleSheet';\n\ntype PickerAndroidProps = $ReadOnly<{|\n  children?: React.Node,\n  style?: ?TextStyleProp,\n  selectedValue?: ?(number | string),\n  enabled?: ?boolean,\n  mode?: ?('dialog' | 'dropdown'),\n  onBlur?: (e: NativeSyntheticEvent<undefined>) => mixed,\n  onFocus?: (e: NativeSyntheticEvent<undefined>) => mixed,\n  onValueChange?: ?(itemValue: ?(string | number), itemIndex: number) => mixed,\n  prompt?: ?string,\n  testID?: string,\n  dropdownIconColor?: string,\n  numberOfLines?: ?number,\n|}>;\n\ntype PickerRef = React.ElementRef<\n  | typeof AndroidDialogPickerNativeComponent\n  | typeof AndroidDropdownPickerNativeComponent,\n>;\n\n/**\n * Not exposed as a public API - use <Picker> instead.\n */\nfunction PickerAndroid(props: PickerAndroidProps, ref: PickerRef): React.Node {\n  const pickerRef = React.useRef(null);\n\n  React.useImperativeHandle(ref, () => {\n    const viewManagerConfig = UIManager.getViewManagerConfig(\n      props.mode === MODE_DROPDOWN\n        ? 'RNCAndroidDialogPicker'\n        : 'RNCAndroidDropdownPicker',\n    );\n    return {\n      blur: () => {\n        if (!viewManagerConfig.Commands) {\n          return;\n        }\n        UIManager.dispatchViewManagerCommand(\n          findNodeHandle(pickerRef.current),\n          viewManagerConfig.Commands.blur,\n          [],\n        );\n      },\n      focus: () => {\n        if (!viewManagerConfig.Commands) {\n          return;\n        }\n        UIManager.dispatchViewManagerCommand(\n          findNodeHandle(pickerRef.current),\n          viewManagerConfig.Commands.focus,\n          [],\n        );\n      },\n    };\n  });\n\n  const [items, selected] = React.useMemo(() => {\n    // eslint-disable-next-line no-shadow\n    let selected = 0;\n    // eslint-disable-next-line no-shadow\n    const items = React.Children.toArray(props.children).map((child, index) => {\n      if (child === null) {\n        return null;\n      }\n      if (child.props.value === props.selectedValue) {\n        selected = index;\n      }\n\n      const {enabled = true} = child.props;\n\n      const {color, contentDescription, label, style = {}} = child.props;\n\n      const processedColor = processColor(color);\n\n      return {\n        color: color == null ? null : processedColor,\n        contentDescription,\n        label,\n        enabled,\n        style: {\n          ...style,\n          color: style.color ? processColor(style.color) : null,\n          backgroundColor: style.backgroundColor\n            ? processColor(style.backgroundColor)\n            : null,\n        },\n      };\n    });\n    return [items, selected];\n  }, [props.children, props.selectedValue]);\n\n  const onSelect = React.useCallback(\n    ({nativeEvent}: PickerItemSelectSyntheticEvent) => {\n      const {position} = nativeEvent;\n      const onValueChange = props.onValueChange;\n\n      if (onValueChange != null) {\n        if (position >= 0) {\n          const children = React.Children.toArray(props.children).filter(\n            (item) => item != null,\n          );\n          const value = children[position].props.value;\n          if (props.selectedValue !== value) {\n            onValueChange(value, position);\n          }\n        } else {\n          onValueChange(null, position);\n        }\n      }\n\n      // The picker is a controlled component. This means we expect the\n      // on*Change handlers to be in charge of updating our\n      // `selectedValue` prop. That way they can also\n      // disallow/undo/mutate the selection of certain values. In other\n      // words, the embedder of this component should be the source of\n      // truth, not the native component.\n      if (pickerRef.current && selected !== position) {\n        // TODO: using setNativeProps is deprecated and will be unsupported once Fabric lands. Use codegen to generate native commands\n        pickerRef.current.setNativeProps({\n          selected,\n        });\n      }\n    },\n    [props.children, props.onValueChange, props.selectedValue, selected],\n  );\n\n  const Picker =\n    props.mode === MODE_DROPDOWN\n      ? AndroidDropdownPickerNativeComponent\n      : AndroidDialogPickerNativeComponent;\n\n  const rootProps = {\n    accessibilityLabel: props.accessibilityLabel,\n    enabled: props.enabled,\n    items,\n    onBlur: props.onBlur,\n    onFocus: props.onFocus,\n    onSelect,\n    prompt: props.prompt,\n    selected,\n    style: props.style,\n    dropdownIconColor: processColor(props.dropdownIconColor),\n    dropdownIconRippleColor: processColor(props.dropdownIconRippleColor),\n    testID: props.testID,\n    numberOfLines: props.numberOfLines,\n  };\n\n  return <Picker ref={pickerRef} {...rootProps} />;\n}\n\nexport default React.forwardRef<PickerAndroidProps>(PickerAndroid);\n"]}